version: '3.8'

services:
  # Ollama service for AI functionality
  ollama:
    image: ollama/ollama:latest
    container_name: resume-matcher-ollama
    ports:
      - "${OLLAMA_PORT:-11434}:11434"
    volumes:
      - ollama_data:/root/.ollama
    environment:
      - OLLAMA_HOST=0.0.0.0
    networks:
      - resume-matcher-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "ollama", "list"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s

  # Initialize Ollama and pull required models
  ollama-init:
    image: ollama/ollama:latest
    container_name: resume-matcher-ollama-init
    depends_on:
      ollama:
        condition: service_healthy
    volumes:
      - ollama_data:/root/.ollama
    environment:
      - OLLAMA_HOST=${OLLAMA_HOST:-ollama:11434}
    networks:
      - resume-matcher-network
    entrypoint: ["/bin/bash", "-c"]
    command: >
      "echo 'Waiting for Ollama to be ready...' &&
       sleep 10 &&
       echo 'Pulling gemma3:4b model...' &&
       ollama pull gemma3:4b &&
       echo 'Model pull completed'"
    restart: "no"

  # Backend service
  backend:
    build:
      context: .
      dockerfile: Dockerfile.backend
      target: production
    container_name: resume-matcher-backend
    ports:
      - "8000:8000"
    environment:
      - SESSION_SECRET_KEY=a-secret-key-for-production-change-this
      - SYNC_DATABASE_URL=sqlite:///./app.db
      - ASYNC_DATABASE_URL=sqlite+aiosqlite:///./app.db
      - PYTHONDONTWRITEBYTECODE=1
      - OLLAMA_HOST=${OLLAMA_HOST:-http://ollama:11434}
    volumes:
      - backend_data:/app/data
      - backend_db:/app/app.db
    depends_on:
      ollama:
        condition: service_healthy
      ollama-init:
        condition: service_completed_successfully
    networks:
      - resume-matcher-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s

  # Frontend service
  frontend:
    build:
      context: .
      dockerfile: Dockerfile.frontend
      args:
        - NEXT_PUBLIC_API_URL=http://localhost:8000
    container_name: resume-matcher-frontend
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=production
      - NEXT_PUBLIC_API_URL=http://localhost:8000
    depends_on:
      backend:
        condition: service_healthy
    networks:
      - resume-matcher-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:3000"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s

networks:
  resume-matcher-network:
    driver: bridge

volumes:
  ollama_data:
    driver: local
  backend_data:
    driver: local
  backend_db:
    driver: local
