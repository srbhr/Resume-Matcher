{
  "components": {
    "schemas": {
      "Body_upload_resume_api_v1_resume_upload_post": {
        "properties": {
          "file": {
            "format": "binary",
            "title": "File",
            "type": "string"
          }
        },
        "required": [
          "file"
        ],
        "title": "Body_upload_resume_api_v1_resume_upload_post",
        "type": "object"
      },
      "Body_upload_resume_api_v1_resumes_upload_post": {
        "properties": {
          "file": {
            "format": "binary",
            "title": "File",
            "type": "string"
          }
        },
        "required": [
          "file"
        ],
        "title": "Body_upload_resume_api_v1_resumes_upload_post",
        "type": "object"
      },
      "HTTPValidationError": {
        "properties": {
          "detail": {
            "items": {
              "$ref": "#/components/schemas/ValidationError"
            },
            "title": "Detail",
            "type": "array"
          }
        },
        "title": "HTTPValidationError",
        "type": "object"
      },
      "JobUploadRequest": {
        "properties": {
          "job_descriptions": {
            "description": "List of job descriptions in markdown format",
            "items": {
              "type": "string"
            },
            "title": "Job Descriptions",
            "type": "array"
          },
          "resume_id": {
            "description": "UUID reference to the resume",
            "format": "uuid",
            "title": "Resume Id",
            "type": "string"
          }
        },
        "required": [
          "job_descriptions",
          "resume_id"
        ],
        "title": "JobUploadRequest",
        "type": "object"
      },
      "MatchBreakdown": {
        "properties": {
          "education_bonus": {
            "title": "Education Bonus",
            "type": "number"
          },
          "experience_relevance": {
            "title": "Experience Relevance",
            "type": "number"
          },
          "final_score": {
            "title": "Final Score",
            "type": "integer"
          },
          "keyword_coverage": {
            "title": "Keyword Coverage",
            "type": "number"
          },
          "normalized_score": {
            "title": "Normalized Score",
            "type": "number"
          },
          "penalty_missing_critical": {
            "title": "Penalty Missing Critical",
            "type": "number"
          },
          "project_relevance": {
            "title": "Project Relevance",
            "type": "number"
          },
          "raw_weighted_score": {
            "title": "Raw Weighted Score",
            "type": "number"
          },
          "semantic_similarity": {
            "anyOf": [
              {
                "type": "number"
              },
              {
                "type": "null"
              }
            ],
            "title": "Semantic Similarity"
          },
          "skill_overlap": {
            "title": "Skill Overlap",
            "type": "number"
          },
          "weighted_penalty": {
            "title": "Weighted Penalty",
            "type": "number"
          },
          "weighted_positive": {
            "title": "Weighted Positive",
            "type": "number"
          }
        },
        "required": [
          "skill_overlap",
          "keyword_coverage",
          "experience_relevance",
          "project_relevance",
          "education_bonus",
          "penalty_missing_critical",
          "raw_weighted_score",
          "normalized_score",
          "final_score",
          "weighted_positive",
          "weighted_penalty"
        ],
        "title": "MatchBreakdown",
        "type": "object"
      },
      "MatchCounts": {
        "properties": {
          "experience_titles": {
            "title": "Experience Titles",
            "type": "integer"
          },
          "job_keywords": {
            "title": "Job Keywords",
            "type": "integer"
          },
          "project_names": {
            "title": "Project Names",
            "type": "integer"
          },
          "required_qualifications": {
            "title": "Required Qualifications",
            "type": "integer"
          },
          "resume_skills": {
            "title": "Resume Skills",
            "type": "integer"
          }
        },
        "required": [
          "resume_skills",
          "job_keywords",
          "experience_titles",
          "project_names",
          "required_qualifications"
        ],
        "title": "MatchCounts",
        "type": "object"
      },
      "MatchData": {
        "properties": {
          "breakdown": {
            "$ref": "#/components/schemas/MatchBreakdown"
          },
          "counts": {
            "$ref": "#/components/schemas/MatchCounts"
          },
          "coverage": {
            "anyOf": [
              {
                "items": {
                  "additionalProperties": true,
                  "type": "object"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Coverage"
          },
          "job_id": {
            "title": "Job Id",
            "type": "string"
          },
          "resume_id": {
            "title": "Resume Id",
            "type": "string"
          },
          "score": {
            "title": "Score",
            "type": "integer"
          }
        },
        "required": [
          "resume_id",
          "job_id",
          "score",
          "breakdown",
          "counts"
        ],
        "title": "MatchData",
        "type": "object"
      },
      "MatchRequest": {
        "properties": {
          "job_id": {
            "description": "Job UUID",
            "format": "uuid",
            "title": "Job Id",
            "type": "string"
          },
          "resume_id": {
            "description": "Resume UUID",
            "format": "uuid",
            "title": "Resume Id",
            "type": "string"
          }
        },
        "required": [
          "resume_id",
          "job_id"
        ],
        "title": "MatchRequest",
        "type": "object"
      },
      "MatchResponse": {
        "properties": {
          "data": {
            "$ref": "#/components/schemas/MatchData"
          },
          "request_id": {
            "title": "Request Id",
            "type": "string"
          }
        },
        "required": [
          "request_id",
          "data"
        ],
        "title": "MatchResponse",
        "type": "object"
      },
      "ResumeImprovementRequest": {
        "properties": {
          "job_id": {
            "description": "DB UUID reference to the job",
            "format": "uuid",
            "title": "Job Id",
            "type": "string"
          },
          "resume_id": {
            "description": "DB UUID reference to the resume",
            "format": "uuid",
            "title": "Resume Id",
            "type": "string"
          }
        },
        "required": [
          "job_id",
          "resume_id"
        ],
        "title": "ResumeImprovementRequest",
        "type": "object"
      },
      "ValidationError": {
        "properties": {
          "loc": {
            "items": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "integer"
                }
              ]
            },
            "title": "Location",
            "type": "array"
          },
          "msg": {
            "title": "Message",
            "type": "string"
          },
          "type": {
            "title": "Error Type",
            "type": "string"
          }
        },
        "required": [
          "loc",
          "msg",
          "type"
        ],
        "title": "ValidationError",
        "type": "object"
      }
      ,
      "DebitRequest": {
        "properties": {
          "delta": {
            "exclusiveMinimum": 0,
            "title": "Delta",
            "type": "integer"
          },
          "reason": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "description": "Reason for debit entry",
            "title": "Reason"
          }
        },
        "required": [
          "delta"
        ],
        "title": "DebitRequest",
        "type": "object"
      }
    }
  },
  "info": {
    "title": "Resume Matcher",
    "version": "0.1.0"
  },
  "openapi": "3.1.0",
  "paths": {
    "/ai": {
      "get": {
        "description": "Deep health check for AI providers (LLM & Embeddings).\n\n- Does a minimal LLM call (non-PII, tiny prompt)\n- Does a minimal Embedding call\nReturns provider, model and ok/error for each.",
        "operationId": "ai_health_ai_get",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "additionalProperties": true,
                  "title": "Response Ai Health Ai Get",
                  "type": "object"
                }
              }
            },
            "description": "Successful Response"
          }
        },
        "summary": "Ai Health",
        "tags": [
          "Health check"
        ]
      }
    },
    "/api/v1/auth/whoami": {
      "get": {
        "operationId": "whoami_api_v1_auth_whoami_get",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {}
              }
            },
            "description": "Successful Response"
          }
        },
        "summary": "Whoami",
        "tags": [
          "v1"
        ]
      }
    },
    "/api/v1/cache/entity/{entity_type}/{entity_id}": {
      "delete": {
        "operationId": "invalidate_entity_cache_api_v1_cache_entity__entity_type___entity_id__delete",
        "parameters": [
          {
            "in": "path",
            "name": "entity_type",
            "required": true,
            "schema": {
              "title": "Entity Type",
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "entity_id",
            "required": true,
            "schema": {
              "title": "Entity Id",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {}
              }
            },
            "description": "Successful Response"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            },
            "description": "Validation Error"
          }
        },
        "summary": "Invalidate cache entries linked to an entity",
        "tags": [
          "v1",
          "cache"
        ]
      }
    },
    "/api/v1/cache/key/{cache_key}": {
      "delete": {
        "operationId": "invalidate_cache_key_api_v1_cache_key__cache_key__delete",
        "parameters": [
          {
            "in": "path",
            "name": "cache_key",
            "required": true,
            "schema": {
              "title": "Cache Key",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {}
              }
            },
            "description": "Successful Response"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            },
            "description": "Validation Error"
          }
        },
        "summary": "Invalidate explicit cache key",
        "tags": [
          "v1",
          "cache"
        ]
      }
    },
    "/api/v1/health/ai": {
      "get": {
        "description": "Deep health check for AI providers (LLM & Embeddings).\n\n- Does a minimal LLM call (non-PII, tiny prompt)\n- Does a minimal Embedding call\nReturns provider, model and ok/error for each.",
        "operationId": "ai_health_api_v1_health_ai_get",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "additionalProperties": true,
                  "title": "Response Ai Health Api V1 Health Ai Get",
                  "type": "object"
                }
              }
            },
            "description": "Successful Response"
          }
        },
        "summary": "Ai Health",
        "tags": [
          "v1",
          "Health check"
        ]
      }
    },
    "/api/v1/health/healthz": {
      "get": {
        "description": "K8s/Railway style liveness endpoint.\nReturns minimal JSON and verifies DB connectivity.",
        "operationId": "healthz_api_v1_health_healthz_get",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {}
              }
            },
            "description": "Successful Response"
          }
        },
        "summary": "Healthz",
        "tags": [
          "v1",
          "Health check"
        ]
      }
    },
    "/api/v1/health/ping": {
      "get": {
        "description": "health check endpoint",
        "operationId": "ping_api_v1_health_ping_get",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {}
              }
            },
            "description": "Successful Response"
          }
        },
        "summary": "Ping",
        "tags": [
          "v1",
          "Health check"
        ]
      }
    },
    "/api/v1/job": {
      "get": {
        "description": "Retrieves job data from both job_model and processed_job model by job_id.\n\nArgs:\n    job_id: The ID of the job to retrieve\n\nReturns:\n    Combined data from both job and processed_job models\n\nRaises:\n    HTTPException: If the job is not found or if there's an error fetching data.",
        "operationId": "get_job_api_v1_job_get",
        "parameters": [
          {
            "description": "Job ID to fetch data for",
            "in": "query",
            "name": "job_id",
            "required": true,
            "schema": {
              "description": "Job ID to fetch data for",
              "title": "Job Id",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {}
              }
            },
            "description": "Successful Response"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            },
            "description": "Validation Error"
          }
        },
        "summary": "Get job data from both job and processed_job models",
        "tags": [
          "v1"
        ]
      }
    },
    "/api/v1/job/upload": {
      "post": {
        "description": "Accepts a job description as a MarkDown text and stores it in the database.",
        "operationId": "upload_job_api_v1_job_upload_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/JobUploadRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {}
              }
            },
            "description": "Successful Response"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            },
            "description": "Validation Error"
          }
        },
        "summary": "stores the job posting in the database by parsing the JD into a structured format JSON",
        "tags": [
          "v1"
        ]
      }
    },
    "/api/v1/jobs": {
      "get": {
        "description": "Retrieves job data from both job_model and processed_job model by job_id.\n\nArgs:\n    job_id: The ID of the job to retrieve\n\nReturns:\n    Combined data from both job and processed_job models\n\nRaises:\n    HTTPException: If the job is not found or if there's an error fetching data.",
        "operationId": "get_job_api_v1_jobs_get",
        "parameters": [
          {
            "description": "Job ID to fetch data for",
            "in": "query",
            "name": "job_id",
            "required": true,
            "schema": {
              "description": "Job ID to fetch data for",
              "title": "Job Id",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {}
              }
            },
            "description": "Successful Response"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            },
            "description": "Validation Error"
          }
        },
        "summary": "Get job data from both job and processed_job models",
        "tags": [
          "v1"
        ]
      }
    },
    "/api/v1/jobs/upload": {
      "post": {
        "description": "Accepts a job description as a MarkDown text and stores it in the database.",
        "operationId": "upload_job_api_v1_jobs_upload_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/JobUploadRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {}
              }
            },
            "description": "Successful Response"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            },
            "description": "Validation Error"
          }
        },
        "summary": "stores the job posting in the database by parsing the JD into a structured format JSON",
        "tags": [
          "v1"
        ]
      }
    },
    "/api/v1/match": {
      "post": {
        "operationId": "match_resume_job_api_v1_match_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MatchRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MatchResponse"
                }
              }
            },
            "description": "Successful Response"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            },
            "description": "Validation Error"
          }
        },
        "summary": "Compute heuristic match score and breakdown between a resume and a job",
        "tags": [
          "v1"
        ]
      }
    },
    "/api/v1/metrics/llm": {
      "get": {
        "description": "Return basic aggregated metrics about LLM usage & cache.\n\nThis is a lightweight JSON (not Prometheus text) endpoint intended for\ninternal dashboards or quick health checks. Prometheus exposition can be\nlayered later if needed.",
        "operationId": "get_llm_metrics_api_v1_metrics_llm_get",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {}
              }
            },
            "description": "Successful Response"
          }
        },
        "summary": "LLM cache & token metrics",
        "tags": [
          "v1",
          "metrics"
        ]
      }
    },
    "/api/v1/resume": {
      "get": {
        "description": "Retrieves resume data from both resume_model and processed_resume model by resume_id.\n\nArgs:\n    resume_id: The ID of the resume to retrieve\n\nReturns:\n    Combined data from both resume and processed_resume models\n\nRaises:\n    HTTPException: If the resume is not found or if there's an error fetching data.",
        "operationId": "get_resume_api_v1_resume_get",
        "parameters": [
          {
            "description": "Resume ID to fetch data for",
            "in": "query",
            "name": "resume_id",
            "required": true,
            "schema": {
              "description": "Resume ID to fetch data for",
              "title": "Resume Id",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {}
              }
            },
            "description": "Successful Response"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            },
            "description": "Validation Error"
          }
        },
        "summary": "Get resume data from both resume and processed_resume models",
        "tags": [
          "v1"
        ]
      }
    },
    "/api/v1/resume/improve": {
      "post": {
        "description": "Scores and improves a resume against a job description.\n\nRaises:\n    HTTPException: If the resume or job is not found.",
        "operationId": "score_and_improve_api_v1_resume_improve_post",
        "parameters": [
          {
            "description": "Enable streaming response using Server-Sent Events",
            "in": "query",
            "name": "stream",
            "required": false,
            "schema": {
              "default": false,
              "description": "Enable streaming response using Server-Sent Events",
              "title": "Stream",
              "type": "boolean"
            }
          },
          {
            "description": "If false, only deterministic baseline improvement is applied (no LLM call)",
            "in": "query",
            "name": "use_llm",
            "required": false,
            "schema": {
              "default": true,
              "description": "If false, only deterministic baseline improvement is applied (no LLM call)",
              "title": "Use Llm",
              "type": "boolean"
            }
          },
          {
            "description": "If true, fail instead of falling back when LLM/embeddings are unavailable",
            "in": "query",
            "name": "require_llm",
            "required": false,
            "schema": {
              "default": false,
              "description": "If true, fail instead of falling back when LLM/embeddings are unavailable",
              "title": "Require Llm",
              "type": "boolean"
            }
          },
          {
            "description": "Cosine threshold for semantic keyword equivalence when weaving baseline",
            "in": "query",
            "name": "equivalence_threshold",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "maximum": 1.0,
                  "minimum": 0.0,
                  "type": "number"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Cosine threshold for semantic keyword equivalence when weaving baseline",
              "title": "Equivalence Threshold"
            }
          },
          {
            "description": "Always include 'Core Technologies' line even if nothing is missing",
            "in": "query",
            "name": "always_core_tech",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "boolean"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Always include 'Core Technologies' line even if nothing is missing",
              "title": "Always Core Tech"
            }
          },
          {
            "description": "Target relative uplift (e.g., 0.2 for +20%) to try to reach with extra rounds",
            "in": "query",
            "name": "min_uplift",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "maximum": 1.0,
                  "minimum": 0.0,
                  "type": "number"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Target relative uplift (e.g., 0.2 for +20%) to try to reach with extra rounds",
              "title": "Min Uplift"
            }
          },
          {
            "description": "Extra LLM rounds if target not reached; safeguards runtime and cost",
            "in": "query",
            "name": "max_rounds",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "maximum": 5,
                  "minimum": 0,
                  "type": "integer"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Extra LLM rounds if target not reached; safeguards runtime and cost",
              "title": "Max Rounds"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ResumeImprovementRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {}
              }
            },
            "description": "Successful Response"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            },
            "description": "Validation Error"
          }
        },
        "summary": "Score and improve a resume against a job description",
        "tags": [
          "v1"
        ]
      }
    },
    "/api/v1/resume/upload": {
      "post": {
        "description": "Accepts a PDF or DOCX file, converts it to HTML/Markdown, and stores it in the database.\n\nRaises:\n    HTTPException: If the file type is not supported or if the file is empty.",
        "operationId": "upload_resume_api_v1_resume_upload_post",
        "parameters": [
          {
            "description": "Defer structured extraction (faster response, background processing)",
            "in": "query",
            "name": "defer",
            "required": false,
            "schema": {
              "default": false,
              "description": "Defer structured extraction (faster response, background processing)",
              "title": "Defer",
              "type": "boolean"
            }
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/Body_upload_resume_api_v1_resume_upload_post"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {}
              }
            },
            "description": "Successful Response"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            },
            "description": "Validation Error"
          }
        },
        "summary": "Upload a resume in PDF or DOCX format and store it into DB in HTML/Markdown format",
        "tags": [
          "v1"
        ]
      }
    },
    "/api/v1/resumes": {
      "get": {
        "description": "Retrieves resume data from both resume_model and processed_resume model by resume_id.\n\nArgs:\n    resume_id: The ID of the resume to retrieve\n\nReturns:\n    Combined data from both resume and processed_resume models\n\nRaises:\n    HTTPException: If the resume is not found or if there's an error fetching data.",
        "operationId": "get_resume_api_v1_resumes_get",
        "parameters": [
          {
            "description": "Resume ID to fetch data for",
            "in": "query",
            "name": "resume_id",
            "required": true,
            "schema": {
              "description": "Resume ID to fetch data for",
              "title": "Resume Id",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {}
              }
            },
            "description": "Successful Response"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            },
            "description": "Validation Error"
          }
        },
        "summary": "Get resume data from both resume and processed_resume models",
        "tags": [
          "v1"
        ]
      }
    },
    "/api/v1/resumes/improve": {
      "post": {
        "description": "Scores and improves a resume against a job description.\n\nRaises:\n    HTTPException: If the resume or job is not found.",
        "operationId": "score_and_improve_api_v1_resumes_improve_post",
        "parameters": [
          {
            "description": "Enable streaming response using Server-Sent Events",
            "in": "query",
            "name": "stream",
            "required": false,
            "schema": {
              "default": false,
              "description": "Enable streaming response using Server-Sent Events",
              "title": "Stream",
              "type": "boolean"
            }
          },
          {
            "description": "If false, only deterministic baseline improvement is applied (no LLM call)",
            "in": "query",
            "name": "use_llm",
            "required": false,
            "schema": {
              "default": true,
              "description": "If false, only deterministic baseline improvement is applied (no LLM call)",
              "title": "Use Llm",
              "type": "boolean"
            }
          },
          {
            "description": "If true, fail instead of falling back when LLM/embeddings are unavailable",
            "in": "query",
            "name": "require_llm",
            "required": false,
            "schema": {
              "default": false,
              "description": "If true, fail instead of falling back when LLM/embeddings are unavailable",
              "title": "Require Llm",
              "type": "boolean"
            }
          },
          {
            "description": "Cosine threshold for semantic keyword equivalence when weaving baseline",
            "in": "query",
            "name": "equivalence_threshold",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "maximum": 1.0,
                  "minimum": 0.0,
                  "type": "number"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Cosine threshold for semantic keyword equivalence when weaving baseline",
              "title": "Equivalence Threshold"
            }
          },
          {
            "description": "Always include 'Core Technologies' line even if nothing is missing",
            "in": "query",
            "name": "always_core_tech",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "boolean"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Always include 'Core Technologies' line even if nothing is missing",
              "title": "Always Core Tech"
            }
          },
          {
            "description": "Target relative uplift (e.g., 0.2 for +20%) to try to reach with extra rounds",
            "in": "query",
            "name": "min_uplift",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "maximum": 1.0,
                  "minimum": 0.0,
                  "type": "number"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Target relative uplift (e.g., 0.2 for +20%) to try to reach with extra rounds",
              "title": "Min Uplift"
            }
          },
          {
            "description": "Extra LLM rounds if target not reached; safeguards runtime and cost",
            "in": "query",
            "name": "max_rounds",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "maximum": 5,
                  "minimum": 0,
                  "type": "integer"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Extra LLM rounds if target not reached; safeguards runtime and cost",
              "title": "Max Rounds"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ResumeImprovementRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {}
              }
            },
            "description": "Successful Response"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            },
            "description": "Validation Error"
          }
        },
        "summary": "Score and improve a resume against a job description",
        "tags": [
          "v1"
        ]
      }
    },
    "/api/v1/resumes/upload": {
      "post": {
        "description": "Accepts a PDF or DOCX file, converts it to HTML/Markdown, and stores it in the database.\n\nRaises:\n    HTTPException: If the file type is not supported or if the file is empty.",
        "operationId": "upload_resume_api_v1_resumes_upload_post",
        "parameters": [
          {
            "description": "Defer structured extraction (faster response, background processing)",
            "in": "query",
            "name": "defer",
            "required": false,
            "schema": {
              "default": false,
              "description": "Defer structured extraction (faster response, background processing)",
              "title": "Defer",
              "type": "boolean"
            }
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/Body_upload_resume_api_v1_resumes_upload_post"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {}
              }
            },
            "description": "Successful Response"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            },
            "description": "Validation Error"
          }
        },
        "summary": "Upload a resume in PDF or DOCX format and store it into DB in HTML/Markdown format",
        "tags": [
          "v1"
        ]
      }
    },
    "/api/v1/me/credits": {
      "get": {
        "operationId": "get_my_credits_api_v1_me_credits_get",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {}
              }
            },
            "description": "Successful Response"
          }
        },
        "summary": "Get current user's credit balance",
        "tags": [
          "v1"
        ]
      }
    },
    "/api/v1/credits/debit": {
      "post": {
        "operationId": "debit_credits_api_v1_credits_debit_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DebitRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {}
              }
            },
            "description": "Successful Response"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            },
            "description": "Validation Error"
          }
        },
        "summary": "Debit credits for usage",
        "tags": [
          "v1"
        ]
      }
    },
    "/api/v1/stripe/webhook": {
      "post": {
        "operationId": "stripe_webhook_api_v1_stripe_webhook_post",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {}
              }
            },
            "description": "Successful Response"
          }
        },
        "summary": "Stripe webhook (stub)",
        "tags": [
          "v1"
        ]
      }
    },
    "/healthz": {
      "get": {
        "description": "K8s/Railway style liveness endpoint.\nReturns minimal JSON and verifies DB connectivity.",
        "operationId": "healthz_healthz_get",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {}
              }
            },
            "description": "Successful Response"
          }
        },
        "summary": "Healthz",
        "tags": [
          "Health check"
        ]
      }
    },
    "/ping": {
      "get": {
        "description": "health check endpoint",
        "operationId": "ping_ping_get",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {}
              }
            },
            "description": "Successful Response"
          }
        },
        "summary": "Ping",
        "tags": [
          "Health check"
        ]
      }
    }
  }
}