/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/ping": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Ping
         * @description health check endpoint
         */
        get: operations["ping_ping_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/resumes/upload": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Upload a resume in PDF or DOCX format and store it into DB in HTML/Markdown format
         * @description Accepts a PDF or DOCX file, converts it to HTML/Markdown, and stores it in the database.
         *
         *     Raises:
         *         HTTPException: If the file type is not supported or if the file is empty.
         */
        post: operations["upload_resume_api_v1_resumes_upload_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/resumes/improve": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Score and improve a resume against a job description
         * @description Scores and improves a resume against a job description.
         *
         *     Raises:
         *         HTTPException: If the resume or job is not found.
         */
        post: operations["score_and_improve_api_v1_resumes_improve_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/resumes": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get resume data from both resume and processed_resume models
         * @description Retrieves resume data from both resume_model and processed_resume model by resume_id.
         *
         *     Args:
         *         resume_id: The ID of the resume to retrieve
         *
         *     Returns:
         *         Combined data from both resume and processed_resume models
         *
         *     Raises:
         *         HTTPException: If the resume is not found or if there's an error fetching data.
         */
        get: operations["get_resume_api_v1_resumes_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/jobs/upload": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * stores the job posting in the database by parsing the JD into a structured format JSON
         * @description Accepts a job description as a MarkDown text and stores it in the database.
         */
        post: operations["upload_job_api_v1_jobs_upload_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/jobs": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get job data from both job and processed_job models
         * @description Retrieves job data from both job_model and processed_job model by job_id.
         *
         *     Args:
         *         job_id: The ID of the job to retrieve
         *
         *     Returns:
         *         Combined data from both job and processed_job models
         *
         *     Raises:
         *         HTTPException: If the job is not found or if there's an error fetching data.
         */
        get: operations["get_job_api_v1_jobs_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        /** Body_upload_resume_api_v1_resumes_upload_post */
        Body_upload_resume_api_v1_resumes_upload_post: {
            /**
             * File
             * Format: binary
             */
            file: string;
        };
        /** HTTPValidationError */
        HTTPValidationError: {
            /** Detail */
            detail?: components["schemas"]["ValidationError"][];
        };
        /** JobUploadRequest */
        JobUploadRequest: {
            /**
             * Job Descriptions
             * @description List of job descriptions in markdown format
             */
            job_descriptions: string[];
            /**
             * Resume Id
             * Format: uuid
             * @description UUID reference to the resume
             */
            resume_id: string;
        };
        /** ResumeImprovementRequest */
        ResumeImprovementRequest: {
            /**
             * Job Id
             * Format: uuid
             * @description DB UUID reference to the job
             */
            job_id: string;
            /**
             * Resume Id
             * Format: uuid
             * @description DB UUID reference to the resume
             */
            resume_id: string;
        };
        /** ValidationError */
        ValidationError: {
            /** Location */
            loc: (string | number)[];
            /** Message */
            msg: string;
            /** Error Type */
            type: string;
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    ping_ping_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
        };
    };
    upload_resume_api_v1_resumes_upload_post: {
        parameters: {
            query?: {
                /** @description Defer structured extraction (faster response, background processing) */
                defer?: boolean;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "multipart/form-data": components["schemas"]["Body_upload_resume_api_v1_resumes_upload_post"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    score_and_improve_api_v1_resumes_improve_post: {
        parameters: {
            query?: {
                /** @description Enable streaming response using Server-Sent Events */
                stream?: boolean;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ResumeImprovementRequest"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_resume_api_v1_resumes_get: {
        parameters: {
            query: {
                /** @description Resume ID to fetch data for */
                resume_id: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    upload_job_api_v1_jobs_upload_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["JobUploadRequest"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_job_api_v1_jobs_get: {
        parameters: {
            query: {
                /** @description Job ID to fetch data for */
                job_id: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
}
